
    find_element_by_id - поиск по уникальному атрибуту id элемента. Если ваши разработчики проставляют всем элементам в приложении уникальный id, то вам повезло, и вы чаще всего будет использовать этот метод, так как он наиболее стабильный;
    find_element_by_css_selector - поиск элемента с помощью правил на основе CSS. Это универсальный метод поиска, так как большинство веб-приложений использует CSS для вёрстки и задания оформления страницам. Если find_element_by_id вам не подходит из-за отсутствия id у элементов, то скорее всего вы будете использовать именно этот метод в ваших тестах;
    find_element_by_xpath - поиск с помощью языка запросов XPath, позволяет выполнять очень гибкий поиск элементов;
    find_element_by_name - поиск по атрибуту name элемента;
    find_element_by_tag_name - поиск элемента по названию тега элемента;
    find_element_by_class_name - поиск по значению атрибута class;
    find_element_by_link_text - поиск ссылки на странице по полному совпадению;
    find_element_by_partial_link_text - поиск ссылки на странице, если текст селектора совпадает с любой частью текста ссылки.

    Метод get_attribute
    robots_radio = browser.find_element_by_id("robotsRule")
	robots_checked = robots_radio.get_attribute("checked")
	assert robots_checked is None

	just add s for list
    find_elements_by_css_selector;
    find_elements_by_xpath;
    find_elements_by_name;
    find_elements_by_tag_name;
    find_elements_by_class_name;
    find_elements_by_link_text;
    find_elements_by_partial_link_text.

	useful methods:
	element.click()
	element.send_keys()

select
from selenium.webdriver.support.ui import Select
select = Select(browser.find_element_by_tag_name("select"))
select.select_by_value("1") # ищем элемент с текстом "Python"

scroll it

button = browser.find_element_by_tag_name("button")
browser.execute_script("return arguments[0].scrollIntoView(true);", button)
button.click()

upload it

import os 

current_dir = os.path.abspath(os.path.dirname(__file__))    # получаем путь к директории текущего исполняемого файла 
file_path = os.path.join(current_dir, 'file.txt')           # добавляем к этому пути имя файла 
element.send_keys(file_path)

alert (spam)

prompt = browser.switch_to.alert
prompt.send_keys("My answer")
prompt.accept()

switch window

browser.switch_to.window(window_name)

Чтобы узнать имя новой вкладки, нужно использовать метод window_handles, который возвращает массив имён всех вкладок. Зная, что в браузере теперь открыто две вкладки, выбираем вторую вкладку:

new_window = browser.window_handles[1]

Также мы можем запомнить имя текущей вкладки, чтобы иметь возможность потом к ней вернуться:

first_window = browser.window_handles[0]

for waiting if script can not find an element
browser.implicitly_wait(5)

